/* ----------------------
  –û–±—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
------------------------*/
let map, directionsService, directionsRenderer;
let html5QrCodeInstance = null;
let currentPoints = []; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ
let currentMarkers = [];
let _demoInterval = null;

/* ----------------------
  MULTILANGUAGE DICTIONARY
------------------------*/
const translations = {
  ru: {
    allPoints: "–í—Å–µ –ø—É–Ω–∫—Ç—ã",
    route: "–ú–∞—Ä—à—Ä—É—Ç",
    address: "–ê–¥—Ä–µ—Å",
    accepts: "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç",
    schedule: "–ì—Ä–∞—Ñ–∏–∫",
    yourLocation: "–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
    geolocationUnsupported: "–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
    routeError: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç. –û—à–∏–±–∫–∞: ",
    scanning: "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...",
    done: "–ì–æ—Ç–æ–≤–æ!",
    thanks: "–°–ø–∞—Å–∏–±–æ!",
    savedCO2: "–í—ã –ø–æ–º–æ–≥–ª–∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å",
    appPrompt: "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –±–æ–Ω—É—Å–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>‚ÄúExtra Zone‚Äù</b>.",
    openScanner: "–°–¥–∞—Ç—å –±—É—Ç—ã–ª–∫—É (QR)",
    closeScanner: "–ó–∞–∫—Ä—ã—Ç—å —Å–∫–∞–Ω–µ—Ä",
    scanningProcess: "–ò–¥–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...",
    permissionDenied: "üîí –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
    timeoutMsg: "‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ GPS –≤–∫–ª—é—á–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    positionUnavailable: "üõ∞Ô∏è –ü–æ–∑–∏—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–∏–≥–Ω–∞–ª–æ–º GPS.",
    noPoints: "–ù–∞ –∫–∞—Ä—Ç–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞.",
    locatingError: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ."
  },
  en: {
    allPoints: "All points",
    route: "Route",
    address: "Address",
    accepts: "Accepts",
    schedule: "Schedule",
    yourLocation: "Your location",
    geolocationUnsupported: "Your browser does not support geolocation.",
    routeError: "Could not build route. Error: ",
    scanning: "Scanning...",
    done: "Done!",
    thanks: "Thank you!",
    savedCO2: "You helped save",
    appPrompt: "To receive your bonus, open the <b>‚ÄúExtra Zone‚Äù</b> app.",
    openScanner: "Deposit bottle (QR)",
    closeScanner: "Close scanner",
    scanningProcess: "Scanning in progress...",
    permissionDenied: "üîí Access denied! Please allow your browser to use location services: check your device settings.",
    timeoutMsg: "‚è≥ Timeout. Make sure GPS is on and try again.",
    positionUnavailable: "üõ∞Ô∏è Position unavailable. GPS signal issue.",
    noPoints: "There are no available points on the map.",
    locatingError: "Unable to determine your location."
  },
  kz: {
    allPoints: "–ë–∞—Ä–ª—ã“õ –ø—É–Ω–∫—Ç—Ç–µ—Ä",
    route: "–ú–∞—Ä—à—Ä—É—Ç",
    address: "–ú–µ–∫–µ–Ω–∂–∞–π",
    accepts: "“ö–∞–±—ã–ª–¥–∞–π–¥—ã",
    schedule: "–ö–µ—Å—Ç–µ",
    yourLocation: "–°—ñ–∑–¥—ñ“£ –æ—Ä–Ω–∞–ª–∞—Å—É—ã“£—ã–∑",
    geolocationUnsupported: "–ë—Ä–∞—É–∑–µ—Ä –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è–Ω—ã “õ–æ–ª–¥–∞–º–∞–π–¥—ã.",
    routeError: "–ú–∞—Ä—à—Ä—É—Ç —Å–∞–ª—ã–Ω–±–∞–¥—ã. “ö–∞—Ç–µ: ",
    scanning: "–°–∫–∞–Ω–µ—Ä–ª–µ—É...",
    done: "–î–∞–π—ã–Ω!",
    thanks: "–†–∞“õ–º–µ—Ç!",
    savedCO2: "–°—ñ–∑ “Ø–Ω–µ–º–¥–µ–¥—ñ“£—ñ–∑",
    appPrompt: "–ë–æ–Ω—É—Å—Ç—ã –∞–ª—É “Ø—à—ñ–Ω <b>‚ÄúExtra Zone‚Äù</b> “õ–æ–ª–¥–∞–Ω–±–∞—Å—ã–Ω–∞ ”©—Ç—ñ“£—ñ–∑.",
    openScanner: "–ë”©—Ç–µ–ª–∫–µ —Ç–∞–ø—Å—ã—Ä—É (QR)",
    closeScanner: "–°–∫–∞–Ω–µ—Ä–¥—ñ –∂–∞–±—É",
    scanningProcess: "–°–∫–∞–Ω–µ—Ä–ª–µ—É –∂“Ø—Ä—ñ–ø –∂–∞—Ç—ã—Ä...",
    permissionDenied: "üîí “ö–æ–ª –∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –∂–æ“õ! “ö“±—Ä—ã–ª“ì—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ–Ω–µ–Ω –æ—Ä–Ω–∞–ª–∞—Å—É–¥—ã “õ–æ—Å—ã“£—ã–∑.",
    timeoutMsg: "‚è≥ –£–∞“õ—ã—Ç –∞—è“õ—Ç–∞–ª–¥—ã. GPS “õ–æ—Å—ã–ª—ã–ø —Ç“±—Ä“ì–∞–Ω—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.",
    positionUnavailable: "üõ∞Ô∏è –û—Ä—ã–Ω –∞–Ω—ã“õ—Ç–∞–ª–º–∞–¥—ã. GPS —Å–∏–≥–Ω–∞–ª—ã–Ω–∞ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –ø—Ä–æ–±–ª–µ–º–∞.",
    noPoints: "–ö–∞—Ä—Ç—Ç–∞ –ø—É–Ω–∫—Ç—Ç–µ—Ä –∂–æ“õ.",
    locatingError: "–û—Ä–Ω–∞–ª–∞—Å—É—ã“£—ã–∑–¥—ã –∞–Ω—ã“õ—Ç–∞—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å."
  },
  tr: {
    allPoints: "T√ºm noktalar",
    route: "Rota",
    address: "Adres",
    accepts: "Kabul eder",
    schedule: "√áalƒ±≈üma saatleri",
    yourLocation: "Konumunuz",
    geolocationUnsupported: "Tarayƒ±cƒ±nƒ±z konum servislerini desteklemiyor.",
    routeError: "Rota olu≈üturulamadƒ±. Hata: ",
    scanning: "Tarama...",
    done: "Tamamlandƒ±!",
    thanks: "Te≈üekk√ºrler!",
    savedCO2: "Tasarruf ettiniz",
    appPrompt: "Bonusunuzu almak i√ßin <b>‚ÄúExtra Zone‚Äù</b> uygulamasƒ±nƒ± a√ßƒ±n.",
    openScanner: "≈ûi≈üe teslimi (QR)",
    closeScanner: "Tarayƒ±cƒ±yƒ± kapat",
    scanningProcess: "Tarama devam ediyor...",
    permissionDenied: "üîí Eri≈üim reddedildi! Tarayƒ±cƒ±nƒ±zƒ±n konumu kullanmasƒ±na izin verin.",
    timeoutMsg: "‚è≥ Zaman a≈üƒ±mƒ±. GPS'i a√ßƒ±p tekrar deneyin.",
    positionUnavailable: "üõ∞Ô∏è Konum alƒ±namƒ±yor. GPS sinyal sorunu.",
    noPoints: "Haritada uygun nokta yok.",
    locatingError: "Konumunuz belirlenemiyor."
  }
};

/* ----------------------
  –¢–∏–ø—ã: –∫–ª—é—á–∏ ‚Äî —Ä—É—Å—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏, –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –ø–µ—Ä–µ–≤–æ–¥—ã
------------------------*/
const TYPE_TRANSLATIONS = {
  "–ë—É—Ç—ã–ª–∫–∏ (–ü–≠–¢)": { ru: "–ë—É—Ç—ã–ª–∫–∏ (–ü–≠–¢)", en: "Bottles (PET)", kz: "–ë”©—Ç–µ–ª–∫–µ–ª–µ—Ä (PET)", tr: "≈ûi≈üeler (PET)" },
  "–ê–ª—é–º–∏–Ω–∏–π": { ru: "–ê–ª—é–º–∏–Ω–∏–π", en: "Aluminium", kz: "–ê–ª—é–º–∏–Ω–∏–π", tr: "Al√ºminyum" },
  "–°—Ç–µ–∫–ª–æ": { ru: "–°—Ç–µ–∫–ª–æ", en: "Glass", kz: "–®—ã–Ω—ã", tr: "Cam" },
  "–ë—É–º–∞–≥–∞ –∏ –ö–∞—Ä—Ç–æ–Ω": { ru: "–ë—É–º–∞–≥–∞ –∏ –ö–∞—Ä—Ç–æ–Ω", en: "Paper & Cardboard", kz: "“ö–∞“ì–∞–∑ –∂”ô–Ω–µ –ö–∞—Ä—Ç–æ–Ω", tr: "Kaƒüƒ±t & Karton" },
  "–°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã": { ru: "–°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã", en: "Mixed waste", kz: "–ê—Ä–∞–ª–∞—Å “õ–∞–ª–¥—ã“õ—Ç–∞—Ä", tr: "Karƒ±≈üƒ±k atƒ±klar" }
};

/* ----------------------
  –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ü–£–ù–ö–¢–´ –ü–†–ò–ï–ú–ê (–ê–ª–º–∞—Ç—ã –∏ –ê—Å—Ç–∞–Ω–∞)
  (–≤—Å–µ –ø—É–Ω–∫—Ç—ã –∏–º–µ—é—Ç –ø–æ–ª—è title_*, address_*, schedule_*)
------------------------*/
const allRecyclingPoints = [
    // --- –ê–ª–º–∞—Ç—ã ---
    {
      position:{lat:43.228507, lng:76.933076},
      title_ru:"Freedom (–ú–∞—Ä–∫–æ–≤–∞)",
      title_en:"Freedom (Markova)",
      title_kz:"Freedom (–ú–∞—Ä–∫–æ–≤–∞)",
      title_tr:"Freedom (Markova)",
      schedule_ru:"–ü–Ω-–ü—Ç: 09:00 - 18:00",
      schedule_en:"Mon-Fri: 09:00 - 18:00",
      schedule_kz:"–î—Å-–ñ–º: 09:00 - 18:00",
      schedule_tr:"Pts-Cum: 09:00 - 18:00",
      type: ["–ë—É—Ç—ã–ª–∫–∏ (–ü–≠–¢)"],
      address_ru: "—É–ª–∏—Ü–∞ –ú–∞—Ä–∫–æ–≤–∞, 44",
      address_en: "Markova St., 44",
      address_kz: "–ú–∞—Ä–∫–æ–≤–∞ –∫-—Å—ñ, 44",
      address_tr: "Markova Sk., 44"
    },
    {
      position:{lat:43.219105, lng:76.929349},
      title_ru:"Sparklo (Esentai Tower)",
      title_en:"Sparklo (Esentai Tower)",
      title_kz:"Sparklo (Esentai Tower)",
      title_tr:"Sparklo (Esentai Tower)",
      schedule_ru:"–ü–Ω-–ü—Ç: 08:00 - 19:00",
      schedule_en:"Mon-Fri: 08:00 - 19:00",
      schedule_kz:"–î—Å-–ñ–º: 08:00 - 19:00",
      schedule_tr:"Pts-Cum: 08:00 - 19:00",
      type: ["–ë—É—Ç—ã–ª–∫–∏ (–ü–≠–¢)"],
      address_ru: "–ü—Ä–æ—Å–ø–µ–∫—Ç –ê–ª—å-–§–∞—Ä–∞–±–∏, 77/7, –ë–¶ Esentai Tower, B3 —ç—Ç–∞–∂",
      address_en: "Al-Farabi Ave, 77/7, Esentai Tower, B3 floor",
      address_kz: "”ò–ª-–§–∞—Ä–∞–±–∏ –¥–∞“£“ì—ã–ª—ã, 77/7, Esentai Tower, B3 “õ–∞–±–∞—Ç",
      address_tr: "Al-Farabi Blv, 77/7, Esentai Tower, B3 kat"
    },
    {
      position:{lat:43.204032, lng:76.893641},
      title_ru:"–ê–ª–∞—Ç–∞—É—ç–∫–æ–≤—Ç–æ—Ä (Mega Center)",
      title_en:"AlatauEkovtor (Mega Center)",
      title_kz:"–ê–ª–∞—Ç–∞—É—ç–∫–æ–≤—Ç–æ—Ä (Mega Center)",
      title_tr:"AlatauEkovtor (Mega Center)",
      schedule_ru:"–°—Ä-–í—Å: 10:00 - 19:00",
      schedule_en:"Wed-Sun: 10:00 - 19:00",
      schedule_kz:"–°—Ä-–ñ–∫: 10:00 - 19:00",
      schedule_tr:"√áar-Paz: 10:00 - 19:00",
      type: ["–ë—É—Ç—ã–ª–∫–∏ (–ü–≠–¢)", "–ê–ª—é–º–∏–Ω–∏–π", "–°—Ç–µ–∫–ª–æ", "–ë—É–º–∞–≥–∞ –∏ –ö–∞—Ä—Ç–æ–Ω"],
      address_ru: "–£–ª–∏—Ü–∞ –†–æ–∑—ã–±–∞–∫–∏–µ–≤–∞, 247/3 (–¢–†–¶ Mega Center)",
      address_en: "Rozybakiev St., 247/3 (Mega Center)",
      address_kz: "–†–æ–∑—ã–±–∞–∫–∏–µ–≤ –∫-—Å—ñ, 247/3 (Mega Center)",
      address_tr: "Rozybakiev Sk., 247/3 (Mega Center)"
    },
    {
      position:{lat:43.258295, lng:76.910458},
      title_ru:"–ê–ª–∞—Ç–∞—É—ç–∫–æ–≤—Ç–æ—Ä (–ë–∞–π–∑–∞–∫–æ–≤–∞)",
      title_en:"AlatauEkovtor (Bayzakova)",
      title_kz:"–ê–ª–∞—Ç–∞—É—ç–∫–æ–≤—Ç–æ—Ä (–ë–∞–π–∑–∞–∫–æ–≤)",
      title_tr:"AlatauEkovtor (Bayzakova)",
      schedule_ru:"–°—Ä-–í—Å: 10:00 - 19:00",
      schedule_en:"Wed-Sun: 10:00 - 19:00",
      schedule_kz:"–°—Ä-–ñ–∫: 10:00 - 19:00",
      schedule_tr:"√áar-Paz: 10:00 - 19:00",
      type: ["–ë—É—Ç—ã–ª–∫–∏ (–ü–≠–¢)", "–ê–ª—é–º–∏–Ω–∏–π", "–°—Ç–µ–∫–ª–æ", "–ë—É–º–∞–≥–∞ –∏ –ö–∞—Ä—Ç–æ–Ω"],
      address_ru: "–ë–∞–π–∑–∞–∫–æ–≤–∞ —É–ª–∏—Ü–∞, 73/1",
      address_en: "Bayzakova St., 73/1",
      address_kz: "–ë–∞–π–∑–∞–∫–æ–≤ –∫-—Å—ñ, 73/1",
      address_tr: "Bayzakova Sk., 73/1"
    },
    {
      position:{lat:43.263823, lng:76.817545},
      title_ru:"–ê–ª–∞—Ç–∞—É—ç–∫–æ–≤—Ç–æ—Ä (Almaty Arena)",
      title_en:"AlatauEkovtor (Almaty Arena)",
      title_kz:"–ê–ª–∞—Ç–∞—É—ç–∫–æ–≤—Ç–æ—Ä (Almaty Arena)",
      title_tr:"AlatauEkovtor (Almaty Arena)",
      schedule_ru:"–°—Ä-–í—Å: 10:00 - 19:00",
      schedule_en:"Wed-Sun: 10:00 - 19:00",
      schedule_kz:"–°—Ä-–ñ–∫: 10:00 - 19:00",
      schedule_tr:"√áar-Paz: 10:00 - 19:00",
      type: ["–ë—É—Ç—ã–ª–∫–∏ (–ü–≠–¢)", "–ê–ª—é–º–∏–Ω–∏–π", "–°—Ç–µ–∫–ª–æ", "–ë—É–º–∞–≥–∞ –∏ –ö–∞—Ä—Ç–æ–Ω"],
      address_ru: "–ù—É—Ä–∫–µ–Ω—Ç –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω, 7/1 (Almaty Arena)",
      address_en: "Nurkent microdistrict, 7/1 (Almaty Arena)",
      address_kz: "–ù“±—Ä–∫–µ–Ω—Ç –º–∏–∫—Ä–æ–∞—É–¥–∞–Ω—ã, 7/1 (Almaty Arena)",
      address_tr: "Nurkent mah., 7/1 (Almaty Arena)"
    },
    {
      position:{lat:43.225649, lng:76.873124},
      title_ru:"KWR (8-–π –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω)",
      title_en:"KWR (8th microdistrict)",
      title_kz:"KWR (8-—à—ñ –º–∏–∫—Ä–æ–∞—É–¥–∞–Ω)",
      title_tr:"KWR (8. mahalle)",
      schedule_ru:"–ü–Ω‚Äì–ü—Ç 10:00‚Äì17:00 (–ü–µ—Ä–µ—Ä—ã–≤ 13:30‚Äì14:30), –°–± 10:00‚Äì15:00 (–ü–µ—Ä–µ—Ä—ã–≤ 13:00‚Äì13:30)",
      schedule_en:"Mon‚ÄìFri 10:00‚Äì17:00 (Break 13:30‚Äì14:30), Sat 10:00‚Äì15:00 (Break 13:00‚Äì13:30)",
      schedule_kz:"–î—Å‚Äì–ñ–º 10:00‚Äì17:00 (–¢“Ø—Å–∫—ñ “Ø–∑—ñ–ª—ñ—Å 13:30‚Äì14:30), –°–± 10:00‚Äì15:00 (13:00‚Äì13:30)",
      schedule_tr:"Pts‚ÄìCum 10:00‚Äì17:00 (Ara 13:30‚Äì14:30), Cmt 10:00‚Äì15:00 (13:00‚Äì13:30)",
      type: ["–ë—É—Ç—ã–ª–∫–∏ (–ü–≠–¢)", "–ê–ª—é–º–∏–Ω–∏–π", "–°—Ç–µ–∫–ª–æ", "–ë—É–º–∞–≥–∞ –∏ –ö–∞—Ä—Ç–æ–Ω"],
      address_ru: "8-–π –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω, 57 –∫–∏–æ—Å–∫",
      address_en: "8th microdistrict, kiosk 57",
      address_kz: "8-—à—ñ –º–∏–∫—Ä–æ–∞—É–¥–∞–Ω, 57 –∫–∏–æ—Å–∫",
      address_tr: "8. mahalle, 57 kiosk"
    },
    {
      position:{lat:43.405905, lng:76.889455},
      title_ru:"–ö–æ–º–ø–∞–Ω–∏—è ¬´–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ê¬ª",
      title_en:"Company 'Tekhnologiya A'",
      title_kz:"'–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ê' –∫–æ–º–ø–∞–Ω–∏—è—Å—ã",
      title_tr:"'Tekhnologiya A' ≈üirketi",
      schedule_ru:"–ü–Ω-–°–±: 09:00 - 18:00",
      schedule_en:"Mon-Sat: 09:00 - 18:00",
      schedule_kz:"–î—Å‚Äì–°–±: 09:00 - 18:00",
      schedule_tr:"Pts‚ÄìCmt: 09:00 - 18:00",
      type: ["–ë—É—Ç—ã–ª–∫–∏ (–ü–≠–¢)", "–ë—É–º–∞–≥–∞ –∏ –ö–∞—Ä—Ç–æ–Ω"],
      address_ru: "–£–ª–∏—Ü–∞ –®—É–±–∞–µ–≤–∞, 149/1",
      address_en: "Shubaev St., 149/1",
      address_kz: "–®—É–±–∞–µ–≤ –∫-—Å—ñ, 149/1",
      address_tr: "Shubaev Sk., 149/1"
    },
    {
      position:{lat:43.354659, lng:76.968184},
      title_ru:"LS Almaty",
      title_en:"LS Almaty",
      title_kz:"LS Almaty",
      title_tr:"LS Almaty",
      schedule_ru:"–ü–Ω‚Äì–ü—Ç 09:00‚Äì18:00, –°–± 09:00‚Äì16:00",
      schedule_en:"Mon‚ÄìFri 09:00‚Äì18:00, Sat 09:00‚Äì16:00",
      schedule_kz:"–î—Å‚Äì–ñ–º 09:00‚Äì18:00, –°–± 09:00‚Äì16:00",
      schedule_tr:"Pts‚ÄìCum 09:00‚Äì18:00, Cmt 09:00‚Äì16:00",
      type: ["–ë—É—Ç—ã–ª–∫–∏ (–ü–≠–¢)", "–ê–ª—é–º–∏–Ω–∏–π", "–°—Ç–µ–∫–ª–æ", "–ë—É–º–∞–≥–∞ –∏ –ö–∞—Ä—Ç–æ–Ω"],
      address_ru: "–£–ª–∏—Ü–∞ –ë–µ–∫–º–∞—Ö–∞–Ω–æ–≤–∞, 94/3",
      address_en: "Bekmakhanov St., 94/3",
      address_kz: "–ë–µ–∫–º–∞—Ö–∞–Ω–æ–≤ –∫-—Å—ñ, 94/3",
      address_tr: "Bekmakhanov Sk., 94/3"
    },
    {
      position:{lat:43.238372, lng:76.913979},
      title_ru:"Freedom (–ë–¶ Bayzak)",
      title_en:"Freedom (Bayzak Business Center)",
      title_kz:"Freedom (Bayzak –±–∏–∑–Ω–µ—Å –æ—Ä—Ç–∞–ª—ã“ì—ã)",
      title_tr:"Freedom (Bayzak ƒ∞≈ü Merkezi)",
      schedule_ru:"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 08:00 –¥–æ 21:00",
      schedule_en:"Daily 08:00 - 21:00",
      schedule_kz:"–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ 08:00 - 21:00",
      schedule_tr:"Her g√ºn 08:00 - 21:00",
      type: ["–ë—É—Ç—ã–ª–∫–∏ (–ü–≠–¢)"],
      address_ru: "–ê–±–∞—è –ø—Ä–æ—Å–ø–µ–∫—Ç, 52–≤, –ë–¶ Bayzak, 1 —ç—Ç–∞–∂; –æ–∫–æ–ª–æ –ª–∏—Ñ—Ç–∞",
      address_en: "Abay Ave, 52v, Bayzak BC, 1st floor; near elevator",
      address_kz: "–ê–±–∞–π –¥–∞“£“ì—ã–ª—ã, 52–≤, Bayzak –ë–∏–∑–Ω–µ—Å –æ—Ä—Ç–∞–ª—ã“ì—ã, 1-“õ–∞–±–∞—Ç; –ª–∏—Ñ—Ç—ñ“£ “õ–∞—Å—ã",
      address_tr: "Abay Blv, 52v, Bayzak ƒ∞M, 1. kat; asans√∂r yakƒ±nƒ±nda"
    },
    {
      position:{lat:43.237097, lng:76.931424},
      title_ru:"Sparklo (–ö–∞–∑–ù–ò–¢–£)",
      title_en:"Sparklo (KazNTU)",
      title_kz:"Sparklo (KazNTU)",
      title_tr:"Sparklo (KazNTU)",
      schedule_ru:"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 08:30 –¥–æ 17:30",
      schedule_en:"Daily 08:30 - 17:30",
      schedule_kz:"–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ 08:30 - 17:30",
      schedule_tr:"Her g√ºn 08:30 - 17:30",
      type: ["–ë—É—Ç—ã–ª–∫–∏ (–ü–≠–¢)"],
      address_ru: "–£–ª–∏—Ü–∞ –ö–∞–Ω—ã—à–∞ –°–∞—Ç–ø–∞–µ–≤–∞, 22 (–ö–∞–∑–ù–ò–¢–£)",
      address_en: "Kanysh Satpayev St., 22 (KazNTU)",
      address_kz: "“ö–∞–Ω—ã—à –°”ô—Ç–±–∞–µ–≤ –∫-—Å—ñ, 22 (“ö. –ò. –°”ô—Ç–±–∞–µ–≤ –∞—Ç—ã–Ω–¥–∞“ì—ã “ö–∞–∑–∞“õ “±–ª—Ç—Ç—ã“õ —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∑–µ—Ä—Ç—Ç–µ—É —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ)",
      address_tr: "Kanysh Satpayev Sk., 22 (KazNTU)"
    },
    {
      position:{lat:43.253397, lng:76.83862},
      title_ru:"–ö–∞–∑–ú–µ—Ç",
      title_en:"KazMet",
      title_kz:"KazMet",
      title_tr:"KazMet",
      schedule_ru:"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 20:00",
      schedule_en:"Daily 10:00 - 20:00",
      schedule_kz:"–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ 10:00 - 20:00",
      schedule_tr:"Her g√ºn 10:00 - 20:00",
      type: ["–ê–ª—é–º–∏–Ω–∏–π"],
      address_ru: "–ü—Ä–æ—Å–ø–µ–∫—Ç –¢—É—Ä–∞—Ä–∞ –†—ã—Å–∫—É–ª–æ–≤–∞, 143/5",
      address_en: "Turar Ryskulov Ave, 143/5",
      address_kz: "–¢“±—Ä–∞—Ä –†—ã—Å“õ“±–ª–æ–≤ –¥–∞“£“ì—ã–ª—ã, 143/5",
      address_tr: "Turar Ryskulov Blv, 143/5"
    },
    {
      position:{lat:43.29885, lng:76.931883},
      title_ru:"Aurum",
      title_en:"Aurum",
      title_kz:"Aurum",
      title_tr:"Aurum",
      schedule_ru:"–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ",
      schedule_en:"24/7",
      schedule_kz:"24/7",
      schedule_tr:"7/24",
      type: ["–ê–ª—é–º–∏–Ω–∏–π"],
      address_ru: "–£–ª–∏—Ü–∞ –ò—Å—Å—ã–∫-–ö—É–ª—å—Å–∫–∞—è, 53",
      address_en: "Issyk-Kul St., 53",
      address_kz: "Issyk-Kul –∫-—Å—ñ, 53",
      address_tr: "Issyk-Kul Sk., 53"
    },
    {
      position:{lat:43.341587, lng:76.944845},
      title_ru:"Glass Trade",
      title_tr:"Glass Trade",
      title_en:"Glass Trade",
      title_kz:"Glass Trade",
      schedule_ru:"–ü–Ω‚Äì–°–± 11:00‚Äì18:00",
      schedule_en:"Mon‚ÄìSat 11:00‚Äì18:00",
      schedule_kz:"–î—Å‚Äì–°–± 11:00‚Äì18:00",
      schedule_tr:"Pts‚ÄìCmt 11:00‚Äì18:00",
      type: ["–°—Ç–µ–∫–ª–æ"],
      address_ru: "–£–ª–∏—Ü–∞ –û—Å–∏–ø–µ–Ω–∫–æ, 15/2",
      address_en: "Osipenko St., 15/2",
      address_kz: "–û—Å–∏–ø–µ–Ω–∫–æ –∫-—Å—ñ, 15/2",
      address_tr: "Osipenko Sk., 15/2"
    },
    {
      position:{lat:43.219388, lng:76.772647},
      title_ru:"Kz recycling (–ê–ª—Ç—ã–Ω –û—Ä–¥–∞)",
      title_en:"Kz recycling (Altyn Orda)",
      title_kz:"Kz recycling (–ê–ª—Ç—ã–Ω –û—Ä–¥–∞)",
      title_tr:"Kz recycling (Altyn Orda)",
      schedule_ru:"–ü–Ω‚Äì–ü—Ç 08:00‚Äì17:00 (–ü–µ—Ä–µ—Ä—ã–≤ 12:00‚Äì13:00)",
      schedule_en:"Mon‚ÄìFri 08:00‚Äì17:00 (Break 12:00‚Äì13:00)",
      schedule_kz:"–î—Å‚Äì–ñ–º 08:00‚Äì17:00 (12:00‚Äì13:00)",
      schedule_tr:"Pts‚ÄìCum 08:00‚Äì17:00 (12:00‚Äì13:00)",
      type: ["–ë—É–º–∞–≥–∞ –∏ –ö–∞—Ä—Ç–æ–Ω"],
      address_ru: "–£–ª–∏—Ü–∞ –ê–ª—Ç—ã–Ω –û—Ä–¥–∞, 2",
      address_en: "Altyn Orda St., 2",
      address_kz: "–ê–ª—Ç—ã–Ω –û—Ä–¥–∞ –∫-—Å—ñ, 2",
      address_tr: "Altyn Orda Sk., 2"
    },
    {
      position:{lat:43.269403, lng:76.940246},
      title_ru:"–ü—É–Ω–∫—Ç –ø—Ä–∏–µ–º–∞ –º–∞–∫—É–ª–∞—Ç—É—Ä—ã",
      title_en:"Paper collection point",
      title_kz:"–ú–∞–∫—É–ª–∞—Ç—É—Ä–∞ “õ–∞–±—ã–ª–¥–∞—É –æ—Ä–Ω—ã",
      title_tr:"Atƒ±k kaƒüƒ±t teslim noktasƒ±",
      schedule_ru:"–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ",
      schedule_en:"24/7",
      schedule_kz:"24/7",
      schedule_tr:"7/24",
      type: ["–ë—É–º–∞–≥–∞ –∏ –ö–∞—Ä—Ç–æ–Ω"],
      address_ru: "–ü—Ä–æ—Å–ø–µ–∫—Ç –ê–±—ã–ª–∞–π —Ö–∞–Ω–∞, 20",
      address_en: "Abylay Khan Ave, 20",
      address_kz: "–ê–±—ã–ª–∞–π —Ö–∞–Ω –¥–∞“£“ì—ã–ª—ã, 20",
      address_tr: "Abylay Khan Blv, 20"
    },
    {
      position:{lat:43.283974, lng:76.920061},
      title_ru:"VOLTMAN",
      title_en:"VOLTMAN",
      title_kz:"VOLTMAN",
      title_tr:"VOLTMAN",
      schedule_ru:"–ü–Ω‚Äì–ü—Ç 09:00‚Äì18:00, –°–± 09:00‚Äì15:00",
      schedule_en:"Mon‚ÄìFri 09:00‚Äì18:00, Sat 09:00‚Äì15:00",
      schedule_kz:"–î—Å‚Äì–ñ–º 09:00‚Äì18:00, –°–± 09:00‚Äì15:00",
      schedule_tr:"Pts‚ÄìCum 09:00‚Äì18:00, Cmt 09:00‚Äì15:00",
      type: ["–°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã"],
      address_ru: "–ü—Ä–æ—Å–ø–µ–∫—Ç –¢—É—Ä–∞—Ä–∞ –†—ã—Å–∫—É–ª–æ–≤–∞, 72–∞",
      address_en: "Turar Ryskulov Ave, 72a",
      address_kz: "–¢“±—Ä–∞—Ä –†—ã—Å“õ“±–ª–æ–≤ –¥–∞“£“ì—ã–ª—ã, 72a",
      address_tr: "Turar Ryskulov Blv, 72a"
    },
    {
      position:{lat:43.243665, lng:76.889922},
      title_ru:"–ë–æ–∫—Å –¥–ª—è –ø—Ä–∏—ë–º–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤",
      title_en:"Box for expired medicines",
      title_kz:"–ú–µ—Ä–∑—ñ–º—ñ ”©—Ç–∫–µ–Ω –¥”ô—Ä—ñ–ª–µ—Ä–¥—ñ “õ–∞–±—ã–ª–¥–∞—É “õ–æ—Ä–∞–±—ã",
      title_tr:"S√ºresi ge√ßmi≈ü ila√ß toplama kutusu",
      schedule_ru:"–ü–Ω‚Äì–ü—Ç 08:00‚Äì20:00, –°–± 09:00‚Äì14:00",
      schedule_en:"Mon‚ÄìFri 08:00‚Äì20:00, Sat 09:00‚Äì14:00",
      schedule_kz:"–î—Å‚Äì–ñ–º 08:00‚Äì20:00, –°–± 09:00‚Äì14:00",
      schedule_tr:"Pts‚ÄìCum 08:00‚Äì20:00, Cmt 09:00‚Äì14:00",
      type: ["–°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã"],
      address_ru: "–£–ª–∏—Ü–∞ –†–æ–∑—ã–±–∞–∫–∏–µ–≤–∞, 74",
      address_en: "Rozybakiev St., 74",
      address_kz: "–†–æ–∑—ã–±–∞–∫–∏–µ–≤ –∫-—Å—ñ, 74",
      address_tr: "Rozybakiev Sk., 74"
    },
    // --- –ê—Å—Ç–∞–Ω–∞ ---
    {
      position:{lat:51.12802, lng:71.425381},
      title_ru:"Sparklo (–î–æ—Å—Ç—ã–∫, –ê—Å—Ç–∞–Ω–∞)",
      title_en:"Sparklo (Dostyk, Astana)",
      title_kz:"Sparklo (–î–æ—Å—Ç—ã“õ, –ê—Å—Ç–∞–Ω–∞)",
      title_tr:"Sparklo (Dostyk, Astana)",
      schedule_ru:"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 09:00 –¥–æ 24:00",
      schedule_en:"Daily 09:00 - 24:00",
      schedule_kz:"–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ 09:00 - 24:00",
      schedule_tr:"Her g√ºn 09:00 - 24:00",
      type: ["–ë—É—Ç—ã–ª–∫–∏ (–ü–≠–¢)"],
      address_ru: "–£–ª–∏—Ü–∞ –î–æ—Å—Ç—ã–∫, 9",
      address_en: "Dostyk St., 9",
      address_kz: "–î–æ—Å—Ç—ã“õ –∫-—Å—ñ, 9",
      address_tr: "Dostyk Sk., 9"
    }
];

/* ----------------------
  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —è–∑—ã–∫–∞
------------------------*/
const RECYCLING_TYPES_KEYS = Object.keys(TYPE_TRANSLATIONS); // —Ä—É—Å—Å–∫–∏–µ –∫–ª—é—á–∏
let currentLang = 'en'; // default; –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º —Å—Ç—Ä–æ–≥–æ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞

/* ----------------------
  –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
------------------------*/
function t(key) {
  return translations[currentLang] && translations[currentLang][key] ? translations[currentLang][key] : key;
}

function translateType(typeKey) {
  const map = TYPE_TRANSLATIONS[typeKey];
  if (!map) return typeKey;
  return map[currentLang] || map['ru'] || typeKey;
}

function getTitleForPoint(p) {
  return p['title_' + currentLang] || p.title_ru || '';
}
function getAddressForPoint(p) {
  return p['address_' + currentLang] || p.address_ru || '';
}
function getScheduleForPoint(p) {
  return p['schedule_' + currentLang] || p.schedule_ru || '';
}

/* ----------------------
  –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å—Ç—Ä–æ–≥–æ –ø–æ –∏–º–µ–Ω–∏ HTML-—Ñ–∞–π–ª–∞
  (index.html -> en, index_ru.html -> ru, index_kz.html -> kz, index_tr.html -> tr)
------------------------*/
function detectLangFromPath() {
  const currentPath = window.location.pathname;
  const filename = currentPath.substring(currentPath.lastIndexOf('/') + 1).toLowerCase();
  const match = filename.match(/_((ru|kz|tr))\.html$/);
  if (match && match[1]) {
    currentLang = match[1];
  } else {
    // –µ—Å–ª–∏ –µ—Å—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å –≤–∏–¥–∞ _en.html (—Ä–µ–¥–∫–æ), –∏–ª–∏ —Ñ–∞–π–ª –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–º
    currentLang = 'en';
  }
}

/* ----------------------
  MAP: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –º–∞—Ä—à—Ä—É—Ç
------------------------*/
function initMap(){
  detectLangFromPath();

  const center = allRecyclingPoints[0].position;
  map = new google.maps.Map(document.getElementById("map"), { center, zoom: 11 });
  directionsService = new google.maps.DirectionsService();
  directionsRenderer = new google.maps.DirectionsRenderer({suppressMarkers:false});
  directionsRenderer.setMap(map);

  if(document.body.classList.contains('index-page')) {
      initIndexMap();
  } else if (document.body.classList.contains('map-page')) {
      setupMapPage();
  }

  updateStaticUITexts();
}

function initIndexMap() {
    const bottlePoints = allRecyclingPoints.filter(p => p.type.includes("–ë—É—Ç—ã–ª–∫–∏ (–ü–≠–¢)"));
    currentPoints = bottlePoints;
    if(directionsRenderer) directionsRenderer.setDirections({routes:[]});
    populatePoints(bottlePoints);
    findNearest();
}

function setupMapPage() {
    map.setCenter(allRecyclingPoints[0].position);
    map.setZoom(10);
    renderFilterButtons();
    filterMapByType('All');
}

function renderFilterButtons() {
    const filterContainer = document.getElementById('filter-buttons');
    if (!filterContainer) return;
    filterContainer.innerHTML = '';

    const allBtn = document.createElement('button');
    allBtn.className = 'filter-btn active';
    allBtn.textContent = t('allPoints');
    allBtn.onclick = () => filterMapByType('All');
    filterContainer.appendChild(allBtn);

    RECYCLING_TYPES_KEYS.forEach(typeKey => {
        const btn = document.createElement('button');
        btn.className = 'filter-btn';
        btn.textContent = translateType(typeKey);
        btn.setAttribute('data-type', typeKey);
        btn.onclick = () => filterMapByType(typeKey);
        filterContainer.appendChild(btn);
    });
}

function clearMarkers() {
    currentMarkers.forEach(marker => {
        if (marker.infowindow) marker.infowindow.close();
        marker.setMap(null);
    });
    currentMarkers = [];
    if(directionsRenderer) directionsRenderer.setDirections({routes:[]});
}

function filterMapByType(selectedType) {
    let filtered;
    if (selectedType === 'All') {
        filtered = allRecyclingPoints;
    } else {
        filtered = allRecyclingPoints.filter(p => p.type.includes(selectedType));
    }

    const buttons = document.querySelectorAll('.filter-btn');
    buttons.forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-type') === selectedType || (selectedType === 'All' && btn.textContent === t('allPoints'))) {
            btn.classList.add('active');
        }
    });

    populatePoints(filtered);

    if (filtered.length > 0) {
        map.setCenter(filtered[0].position);
    }
}

function populatePoints(points){
  clearMarkers();
  currentPoints = points;
  const list = document.getElementById("locations-list");
  if(list) list.innerHTML = "";

  points.forEach((p) => {
    const pos = p.position;
    const title = getTitleForPoint(p);
    const isPetOnly = p.type.length === 1 && p.type.includes("–ë—É—Ç—ã–ª–∫–∏ (–ü–≠–¢)");
    const iconUrl = isPetOnly ? "http://google.com/mapfiles/ms/icons/red-dot.png" : "http://google.com/mapfiles/ms/icons/green-dot.png";

    const marker = new google.maps.Marker({
        position:pos,
        map:map,
        title:title,
        icon: { url: iconUrl }
    });
    currentMarkers.push(marker);

    const typesDisplay = p.type.map(typeKey => translateType(typeKey)).join(', ');

    const iwContent = `
        <div style="font-family: Arial, sans-serif; line-height: 1.5;">
            <strong style="color: #d32f2f;">${title}</strong><br>
            <span style="font-size: 0.9em;">${t('address')}: ${getAddressForPoint(p) || '‚Äî'}</span><br>
            <span style="font-size: 0.9em; color: #388e3c;">${t('accepts')}: <b>${typesDisplay}</b></span><br>
            <span style="font-size: 0.9em; color: #00796b;">${t('schedule')}: ${getScheduleForPoint(p) || '‚Äî'}</span><br>
            <button onclick="calculateRouteTo(${pos.lat}, ${pos.lng})" class="btn secondary btn-map-small" style="margin-top: 5px;">${t('route')}</button>
        </div>
    `;
    const infowindow = new google.maps.InfoWindow({ content: iwContent });

    marker.addListener("click", () => {
        currentMarkers.forEach(m => {
            if (m.infowindow) m.infowindow.close();
        });
        infowindow.open(map, marker);
    });
    marker.infowindow = infowindow;

    if(list) {
      const item = document.createElement('div');
      item.className = 'location-item';
      item.onclick = () => {
        map.setCenter(pos);
        map.setZoom(15);
        google.maps.event.trigger(marker, 'click');
      };

      item.innerHTML = `
        <strong>${title}</strong>
        <div class="schedule-label">${getAddressForPoint(p) || ''}</div>
        <div class="type-label">${t('accepts')}: ${typesDisplay}</div>
        <div class="schedule-label">${t('schedule')}: ${getScheduleForPoint(p) || ''}</div>
      `;
      list.appendChild(item);
    }
  });
}

/* ----------------------
  –ú–∞—Ä—à—Ä—É—Ç –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
------------------------*/
function calculateRouteTo(lat, lng) {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                const origin = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                const destination = { lat: lat, lng: lng };
                displayRoute(origin, destination);
            },
            (error) => {
                handleGeolocationError(error);
            },
            {
                enableHighAccuracy: true,
                timeout: 10000,
                maximumAge: 0
            }
        );
    } else {
        alert(t('geolocationUnsupported'));
    }
}
function displayRoute(origin, destination) {
    directionsService.route({
        origin: origin,
        destination: destination,
        travelMode: google.maps.TravelMode.DRIVING
    }, (response, status) => {
        if (status === 'OK') {
            directionsRenderer.setDirections(response);
            directionsRenderer.setMap(map);
        } else {
            window.alert(t('routeError') + status);
        }
    });
}

function handleGeolocationError(error) {
    let message = t('locatingError');

    if (error && error.code === error.PERMISSION_DENIED) {
        message = t('permissionDenied');
    } else if (error && error.code === error.TIMEOUT) {
        message = t('timeoutMsg');
    } else if (error && error.code === error.POSITION_UNAVAILABLE) {
        message = t('positionUnavailable');
    }

    alert(message);
    console.error("Geolocation Error:", error && error.code, error && error.message);

    if (map) {
        map.setCenter(allRecyclingPoints[0].position);
        map.setZoom(11);
    }
}

function findNearest() {
    if (navigator.geolocation && currentPoints.length > 0) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                const userLocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };

                map.setCenter(userLocation);
                map.setZoom(14);

                new google.maps.Marker({
                    position: userLocation,
                    map: map,
                    title: t('yourLocation'),
                    icon: { url: "http://google.com/mapfiles/ms/icons/blue-dot.png" }
                });

                let nearestPoint = null;
                let minDistance = Infinity;

                currentPoints.forEach(p => {
                    const distance = google.maps.geometry.spherical.computeDistanceBetween(
                        new google.maps.LatLng(userLocation.lat, userLocation.lng),
                        new google.maps.LatLng(p.position.lat, p.position.lng)
                    );

                    if (distance < minDistance) {
                        minDistance = distance;
                        nearestPoint = p;
                    }
                });

                if (nearestPoint) {
                    displayRoute(userLocation, nearestPoint.position);
                    const nearestMarker = currentMarkers.find(m => {
                      try {
                        return m.position.lat() === nearestPoint.position.lat && m.position.lng() === nearestPoint.position.lng;
                      } catch (e) {
                        return false;
                      }
                    });
                    if (nearestMarker && nearestMarker.infowindow) {
                         google.maps.event.trigger(nearestMarker, 'click');
                    }
                }
            },
            (error) => {
                handleGeolocationError(error);
            },
            {
                enableHighAccuracy: true,
                timeout: 10000,
                maximumAge: 0
            }
        );
    } else if (currentPoints.length === 0) {
        alert(t('noPoints'));
    } else {
        alert(t('geolocationUnsupported'));
    }
}

/* ===============================
   Eco-QR: –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è (UI)
   =============================== */
function openScanner() {
  const qrSection = document.getElementById("qr-scanner-section");
  const heroSection = document.querySelector(".hero");
  const btn = document.getElementById("open-scan");

  if (!qrSection) return;

  const isOpen = !qrSection.classList.contains("hidden");
  if (isOpen) {
    resetDemoUI();
    qrSection.classList.add("hidden");
    qrSection.style.display = "none";
    if (heroSection) heroSection.style.display = "block";
    if (btn) btn.textContent = t('openScanner');
  } else {
    qrSection.classList.remove("hidden");
    qrSection.style.display = "block";
    if (heroSection) heroSection.style.display = "none";
    if (btn) btn.textContent = t('closeScanner');
    showDemoUI();
  }
}

function showDemoUI() {
  const qrDemo = document.getElementById("qr-demo");
  if (qrDemo) qrDemo.style.display = "block";

  const startBtn = document.getElementById("start-demo-btn");
  const cancelBtn = document.getElementById("cancel-demo-btn");
  if (startBtn && !startBtn._attached) {
    startBtn.addEventListener("click", startDemoScan);
    startBtn._attached = true;
  }
  if (cancelBtn && !cancelBtn._attached) {
    cancelBtn.addEventListener("click", resetDemoUI);
    cancelBtn._attached = true;
  }
}

function resetDemoUI() {
  const progress = document.getElementById("demo-progress");
  const fakeText = document.getElementById("fake-text");
  const demoResult = document.getElementById("demo-result");
  const photoSection = document.getElementById("photo-upload-section");
  const confirmBox = document.getElementById("confirmation-box");

  if (progress) progress.style.width = "0%";
  if (fakeText) fakeText.textContent = t('scanningProcess');
  if (demoResult) { demoResult.style.display = "none"; demoResult.textContent = ""; }
  if (photoSection) photoSection.classList.add("hidden");
  if (confirmBox) confirmBox.remove();
  if (_demoInterval) clearInterval(_demoInterval);
}

function startDemoScan() {
  const progressBar = document.getElementById("demo-progress");
  const fakeText = document.getElementById("fake-text");

  if (!progressBar) return;
  let width = 0;
  progressBar.style.width = "0%";
  fakeText.textContent = t('scanning');

  if (_demoInterval) clearInterval(_demoInterval);

  _demoInterval = setInterval(() => {
    width += Math.floor(Math.random() * 10) + 8;
    if (width >= 100) width = 100;
    progressBar.style.width = width + "%";

    if (width >= 100) {
      clearInterval(_demoInterval);
      _demoInterval = null;
      fakeText.textContent = t('done');
      const photoSection = document.getElementById("photo-upload-section");
      if (photoSection) {
        photoSection.classList.remove("hidden");
        photoSection.style.display = "block";
      }
    }
  }, 200);
}

function previewImage(event) {
  const file = event.target.files[0];
  if (!file) return;
  const preview = document.getElementById("photo-preview");
  preview.src = URL.createObjectURL(file);
  preview.classList.remove("hidden");
  preview.style.display = "block";
}

function confirmSubmission() {
  const section = document.getElementById("photo-upload-section");
  if (section) section.classList.add("hidden");

  const overlay = document.createElement("div");
  overlay.id = "confirmation-box";
  overlay.style.position = "fixed";
  overlay.style.top = 0;
  overlay.style.left = 0;
  overlay.style.width = "100%";
  overlay.style.height = "100%";
  overlay.style.background = "rgba(0,0,0,0.5)";
  overlay.style.display = "flex";
  overlay.style.justifyContent = "center";
  overlay.style.alignItems = "center";
  overlay.style.zIndex = "9999";

  const box = document.createElement("div");
  box.style.background = "#fff";
  box.style.borderRadius = "20px";
  box.style.padding = "30px 20px";
  box.style.textAlign = "center";
  box.style.width = "90%";
  box.style.maxWidth = "340px";
  box.style.boxShadow = "0 6px 25px rgba(0,0,0,0.2)";
  box.style.animation = "fadeIn 0.5s ease";

  box.innerHTML = `
    <div style="font-size:50px; color:green; animation:pop 0.6s ease;">‚úîÔ∏è</div>
    <h3 style="margin-top:10px;">${t('thanks')}</h3>
    <p>${t('savedCO2')} <b>0.25 kg CO‚ÇÇ!</b></p>
    <p>${t('appPrompt')}</p>
  `;

  overlay.appendChild(box);
  document.body.appendChild(overlay);

  setTimeout(() => {
    overlay.style.opacity = "0";
    overlay.style.transition = "opacity 0.5s";
    setTimeout(() => overlay.remove(), 500);
  }, 4000);
}

const style = document.createElement("style");
style.textContent = `
@keyframes fadeIn { from {opacity:0; transform:scale(0.9);} to {opacity:1; transform:scale(1);} }
@keyframes pop { 0%{transform:scale(0);} 60%{transform:scale(1.2);} 100%{transform:scale(1);} }
`;
document.head.appendChild(style);

/* ----------------------
  LANGUAGE SWITCHER (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤-–≤–µ—Ä—Å–∏–π)
------------------------*/
document.addEventListener('DOMContentLoaded', () => {
    detectLangFromPath();

    const langSwitcher = document.getElementById('lang-switcher');
    if (langSwitcher) {
        const currentPath = window.location.pathname;
        let currentFile = currentPath.substring(currentPath.lastIndexOf('/') + 1);
        let baseFileName = currentFile.replace(/_(en|kz|tr|ru)\.html$/, '').replace(/\.html$/, '');

        const options = langSwitcher.options;
        for (let i = 0; i < options.length; i++) {
            // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–ø—Ü–∏–∏ –∏–º–µ—é—Ç value –≤–∏–¥–∞ 'index.html' –∏–ª–∏ 'index_en.html'
            const fileTemplate = options[i].value.replace('index', baseFileName);
            options[i].value = fileTemplate;
            if (options[i].value === currentFile || (currentFile === baseFileName + '.html' && options[i].value === baseFileName + '.html')) {
                options[i].selected = true;
            }
        }

        langSwitcher.addEventListener('change', (event) => {
            const newFile = event.target.value;
            // –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å (–¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
            const detected = newFile.toLowerCase().match(/_((ru|kz|tr))\.html$/);
            let newLang = 'en';
            if (detected && detected[1]) newLang = detected[1];
            try { localStorage.setItem('lang', newLang); } catch(e) {}
            const newPath = currentPath.substring(0, currentPath.lastIndexOf('/') + 1);
            window.location.href = newPath + newFile;
        });
    }

    const menuBtn = document.getElementById('mobile-menu');
    const navLinks = document.getElementById('nav-links');

    if (menuBtn && navLinks) {
      menuBtn.addEventListener('click', () => {
        navLinks.classList.toggle('active');
      });
    }

    updateStaticUITexts();
});

/* ----------------------
  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö UI-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
------------------------*/
function updateStaticUITexts() {
  const openBtn = document.getElementById('open-scan');
  if (openBtn) {
    const qrSection = document.getElementById("qr-scanner-section");
    const isOpen = qrSection && !qrSection.classList.contains("hidden");
    openBtn.textContent = isOpen ? t('closeScanner') : t('openScanner');
  }

  const filterContainer = document.getElementById('filter-buttons');
  if (filterContainer && document.body.classList.contains('map-page')) {
    renderFilterButtons();
    const btns = filterContainer.querySelectorAll('.filter-btn');
    btns.forEach(b => b.classList.remove('active'));
    if (btns.length > 0) btns[0].classList.add('active');
  }

  if (currentPoints && currentPoints.length > 0) {
    populatePoints(currentPoints);
  }
}

/* ===============================
  –û–±—ä—è–≤–ª—è–µ–º initMap –≥–ª–æ–±–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã Google Maps callback –º–æ–≥ –µ–≥–æ –≤—ã–∑–≤–∞—Ç—å
  (–£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ Google Maps API —É–∫–∞–∑–∞–Ω &callback=initMap)
   =============================== */
